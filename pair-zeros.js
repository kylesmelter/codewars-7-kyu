// DESCRIPTION:
// Task
// For a given list of digits 0 to 9, return a list with the same digits in the same order, but with all 0s paired. Pairing two 0s generates one 0 at the location of the first one.

// Examples
// input: [0, 1, 0, 2]
// paired: ^-----^
//     -> [0, 1,   2]
//   kept: ^

// input: [0, 1, 0, 0]
// paired: ^-----^
//     -> [0, 1,    0]
//   kept: ^        ^

// input: [1, 0, 7, 0, 1]
// paired:    ^-----^
//     -> [1, 0, 7,    1]
//   kept:    ^

// input: [0, 1, 7, 0, 2, 2, 0, 0, 1, 0]
// paired: ^--------^        ^--^
//     -> [0, 1, 7,    2, 2, 0,    1, 0]
//   kept: ^                 ^        ^
// Notes
// Pairing happens from left to right. For each pairing, the second 0 will always be paired towards the first ( right to left )
// 0s generated by pairing can NOT be paired again
// ( void where not applicable: ) Don't modify the input array or you may fail to pass the tests

function pairZeros(arr) {
    // We'll start by creating a counter variable, count, that will keep track of the current amount
    // of 0's while iterating over the input array
    let count = 0;
    // Next we'll create an empty array, result, that we'll push our values to in order to return
    // at the end
    let result = [];
    // Now we'll create a for-loop to iterate over the input array
    for(let i = 0; i <= arr.length - 1; i++) {
      // Inside the loop we'll have an if-conditional to check if the current value === 0
      if(arr[i] === 0 && count === 0) {
        // If the current value === 0 and count === 0, we'll use .push() to add it to our
        // 'result' array. We'll also add 1 to our 'count' variable
        result.push(arr[i]);
        count++;
      } else if(arr[i] === 0 && count === 1) {
        // If the current value === 0 and 'count' === 1, we'll skip over that 0 and reset 
        // 'count' back to 0
        count = 0;
      } else if(arr[i] !== 0) {
        // Lastly, if the current !== 0, we'll use .push() to add it to our 'result' array
        result.push(arr[i]);
      };
    };
    // All we need to do now is return 'result!'
    return result;
}; 